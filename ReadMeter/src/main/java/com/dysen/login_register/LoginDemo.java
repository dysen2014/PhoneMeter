package com.dysen.login_register;import android.app.AlertDialog;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.CountDownTimer;import android.os.Handler;import android.text.Editable;import android.text.Html;import android.text.TextWatcher;import android.text.method.HideReturnsTransformationMethod;import android.text.method.PasswordTransformationMethod;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.EditText;import android.widget.TextView;import com.alibaba.fastjson.JSON;import com.dysen.info.DataInfo;import com.dysen.myUtil.LoadingButton;import com.dysen.myUtil.MyActivityTools;import com.dysen.myUtil.StatusBarUtil;import com.dysen.myUtil.ToastDemo;import com.dysen.myUtil.dialog.SpotsDialog;import com.dysen.myUtil.httpUtil.HttpExcTint;import com.dysen.myUtil.network.NetworkUtil;import com.dysen.mylibrary.utils.kjframe.KJHttp;import com.dysen.mylibrary.utils.kjframe.http.HttpCallBack;import com.dysen.mylibrary.utils.kjframe.http.HttpParams;import com.dysen.mylibrary.utils.tastytoast.TastyToast;import com.dysen.mylibrary.utils.util.SharedPreUtils;import com.dysen.mylibrary.utils.util.ToastUtils;import com.dysen.qj.wMeter.R;import com.dysen.table.TempLogin;import com.dysen.table.tGateWay;import com.dysen.table.tLogin;import com.dysen.table.tUser;import java.util.Date;import java.util.List;/** *  * 邮箱: dysen@outlook.com | dy.sen@qq.com *  * 作者: 沈迪 [ sendy ] *  * 日期: 2015-6-23 下午2:03:40 *  * 描述: 用户登录 *  */public class LoginDemo extends MyActivityTools implements OnClickListener {	Button btnLogin, btnRegister, btnShow, btnForget, btnBack;	CheckBox isCheckBox;	EditText etNameLogin, etPwdLogin;	TextView tvHint;	CountDownTimer cdTimer;	private Handler handler;	DataInfo data;	private int progress;	String uNameLogin, uPwdLogin, strMsg, userName;	private boolean flag_check, isAdd, running, isCipher;	private String HTTP_IP;	private byte[] sendData;	String updateUrl;	MyActivityTools myTools;	TempLogin loginTemp;	tLogin loginT;	tGateWay gateWayT;	tUser userT;	static String name, pwd;	LoadingButton lb ;	List<tLogin> lLogin;	public static Integer loginId, readNum;	private boolean bl;//	KJDB dbLogin;	/**	 * sen dy	 * 	 * 2015-6-23 下午2:12:27	 */	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.activity_login);		//透明状态栏		StatusBarUtil.setTransparent(this);//		StatusBarUtil.setColor(this, R.color.gray);		(this.findViewById(R.id.ll_back)).setOnClickListener(new View.OnClickListener() {			@Override			public void onClick(View v) {				finishActivity("-1", "", false);// 返回数据			}		});		loginTemp = new TempLogin();		loginT = new tLogin();//		dbLogin = KJDB.create(context, "tLogin");		TextView textView  = ((TextView) this.findViewById(R.id.tv_hint));		// 颜色选择时 必须Color。(而  R.color. 是无效的)//		textView.setText(MyTools.setStrhHighlighted("用户登录", Color.RED, 1, 3));		setTitle("登录");		etNameLogin = (EditText) this.findViewById(R.id.et_username_login);		etPwdLogin = (EditText) this.findViewById(R.id.et_pwd_login);		btnLogin = (Button) this.findViewById(R.id.btn_login);		btnShow = (Button) this.findViewById(R.id.btn_show);		btnForget = (Button) this.findViewById(R.id.btn_forget);		btnRegister = (Button) this.findViewById(R.id.btn_register);		tvHint = (TextView) this.findViewById(R.id.tv_hint);		HTTP_IP = this.getText(R.string.HTTP_IP).toString();		isCheckBox = (CheckBox) this.findViewById(R.id.ck_pwd);		lb = (LoadingButton)this.findViewById(R.id.lbtn_default);			name = (String) SharedPreUtils.get(LoginDemo.this, "log_name", "");			pwd = (String) SharedPreUtils.get(LoginDemo.this, "log_pwd", "");			if (!name.equals("") && !pwd.equals("")){				etNameLogin.setText(name);				etPwdLogin.setText(pwd);			}//		if ((Boolean)SharedPreUtils.get(this, "flag_check", true)) {//			name = (String)SharedPreUtils.get(this, "log_name", "");//			pwd = (String)SharedPreUtils.get(this, "log_pwd", "");////			etNameLogin.setText(name);//			etPwdLogin.setText(pwd);//			isCheckBox.setChecked(true);//		}else {//			etNameLogin.setText("");//			etPwdLogin.setText("");//			isCheckBox.setChecked(false);//		}		lb.setTargetProgress(360);		lb.setCallback(new LoadingButton.Callback() {			@Override			public void complete() {				//TODO				myLogin();			}		});		btnForget.setText(Html				.fromHtml("<font  color=\"green\"><u >忘记密码</u></font>"));		btnRegister.setText(Html				.fromHtml("<font  color=\"green\"><u>快速注册</u></font>"));		btnLogin.setOnClickListener(this);		btnShow.setOnClickListener(this);		btnForget.setOnClickListener(this);		btnRegister.setOnClickListener(this);		etNameLogin.addTextChangedListener(textWatcher);		etPwdLogin.addTextChangedListener(textWatcher);		isCheckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {			@Override			public void onCheckedChanged(CompoundButton arg0, boolean arg1) {				if (!"".equals(name) && !"".equals(pwd)) {					System.out.println("账号：" + name + "密码：" + pwd);					if (isCheckBox.isChecked()) {						isCheckBox.setText("已记住");						// ToastDemo.myHint(this, "已选咯记住密码").show();						flag_check = true;//						isCheckBox.setChecked(flag_check);						SharedPreUtils.put(LoginDemo.this, "log_name", name);						SharedPreUtils.put(LoginDemo.this, "log_pwd", pwd);					} else {						isCheckBox.setText("未记住");						etNameLogin.setHint(" 用户名：");						etPwdLogin.setHint(" 用户密码： ");						flag_check = false;//						isCheckBox.setChecked(flag_check);						// ToastDemo.myHint(LoginDemo.this, "未选择咯记住密码").show();					}					SharedPreUtils.put(LoginDemo.this, "flag_check", flag_check);				} else {					ToastDemo.myHint(LoginDemo.this, "账号或密码不能为空", 2);//					ToastUtils.showLong(LoginDemo.this, "账号或密码不能为空", TastyToast.WARNING);				}			}		});//		myHandler();	}	String str;	private TextWatcher textWatcher = new TextWatcher() {		@Override		public void afterTextChanged(Editable s) {			// TODO Auto-generated method stub			Log.d("TAG","afterTextChanged--------------->");		}		@Override		public void beforeTextChanged(CharSequence s, int start, int count,									  int after) {			// TODO Auto-generated method stub			Log.d("TAG","beforeTextChanged--------------->");		}		@Override		public void onTextChanged(CharSequence s, int start, int before,								  int count) {			Log.d("TAG","onTextChanged--------------->");			//实时监控输入的值		}	};	public void edtName(View v){		flag_check = false;		isCheckBox.setChecked(flag_check);	}	public void edtPwd(View v){		flag_check = false;		isCheckBox.setChecked(flag_check);	}	void myResult(String readId, String readName, boolean isSuccessLogin) {		if (isSuccessLogin){			// 数据是使用Intent返回			Intent intent = new Intent();			// 把返回数据存入Intent			intent.putExtra("read_id", readId);			intent.putExtra("read_name", readName);			intent.putExtra("flag_login", isSuccessLogin);			System.out.println("返回：" +readId+"---"+readName+"---"+isSuccessLogin);			// 设置返回数据			LoginDemo.this.setResult(1, intent);			// 关闭Activity			LoginDemo.this.finish();		}else {			ToastUtils.showLong(LoginDemo.this, "登录失败\n"+loginTemp.getMsg(), TastyToast.ERROR);		}	}	void finishActivity(String readId, String readName, boolean isSuccessLogin){		// 数据是使用Intent返回		Intent intent = new Intent();		// 把返回数据存入Intent		intent.putExtra("read_id", readId);		intent.putExtra("read_name", readName);		intent.putExtra("flag_login", isSuccessLogin);		System.out.println("返回：" +readId+"---"+readName+"---"+isSuccessLogin);		// 设置返回数据		LoginDemo.this.setResult(1, intent);		// 关闭Activity		LoginDemo.this.finish();	}	/**	 *	dysen	 *	2015-9-11 上午11:02:06	 *	info:	更换账户	 */	public void btnMoreUser(View v){	}	/**	 * sen dy	 *	 * 2015-6-23 下午4:50:30	 */	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.btn_login://			initBubble(v, "登录");			myLogin();			break;		case R.id.btn_show:			myCipher();			break;		case R.id.btn_forget:			Intent it = new Intent(this, ForgetPwdDemo.class);			it.putExtra("user_name", etNameLogin.getText().toString().trim());			startActivity(it);			break;		case R.id.btn_register:			startActivity(new Intent(this, RegisterDemo.class));			break;		}	}	/**	 * sen dy	 *	 * 2015-6-23 下午4:56:10	 *	 * info: 密文明文显示密码	 */	private void myCipher() {		if (isCipher) {			etPwdLogin.setTransformationMethod(PasswordTransformationMethod					.getInstance()); // 密文显示			btnShow.setBackgroundResource(R.drawable.eyes_press);			isCipher = false;			ToastDemo.myHint(this, "密文显示", 5);		} else {			etPwdLogin.setTransformationMethod(HideReturnsTransformationMethod					.getInstance());// 明文显示			btnShow.setBackgroundResource(R.drawable.eyes_normal);			isCipher = true;			ToastDemo.myHint(this, "明文显示", 5);		}	}	/**	 * dysen 2015-3-26 上午10:50:00 info: 用户登录 函数	 */	private void myLogin() {//		setContentView(R.layout.gif_view);		lLogin = dbLogin.findAll(tLogin.class);		uNameLogin = etNameLogin.getText().toString().trim();		uPwdLogin = etPwdLogin.getText().toString().trim();		if (!"".equals(uNameLogin) && !"".equals(uPwdLogin)) {			if(NetworkUtil.isConnected(this)){				loginHttp(uNameLogin, uPwdLogin);			}else{//没有联网				if (lLogin.size()>0){					for (tLogin login : lLogin){						if (uNameLogin.equals(login.getLogName()) && uPwdLogin.equals(login.getPw())){//本地验证							ToastDemo.myHint(LoginDemo.this, "登录成功", 1);							SharedPreUtils.put(LoginDemo.this, "log_name", uNameLogin);							SharedPreUtils.put(LoginDemo.this, "log_pwd", uPwdLogin);							myResult(login.getReadNumber(), login.getReadName(), login.isSuccess());						}else{//							ToastDemo.myHint(LoginDemo.this, "用户名或密码有误", 3);						}					}				}else{					ToastDemo.myHint(LoginDemo.this, "登录失败", 3);//					finishActivity("-1", "", false);// 返回数据				}			}		} else if ("".equals(uNameLogin) || "".equals(uPwdLogin)) {			ToastDemo.myHint(this, "用户名或密码不为空 ！！！", 2);			// setContentView(R.layout.activity_login);		} else {			ToastDemo.myHint(this, "用户名或密码错误 ！！！", 2);			// setContentView(R.layout.activity_login);		}	}	private void loginHttp(final String uNameLogin, final String uPwdLogin) {		alert = new SpotsDialog(this, "正在登录");		alert.show();//		View v = LayoutInflater.from(this).inflate(//				R.layout.uber_progress, null);//		v.setBackgroundColor(Color.argb(0,0,0,0));//		alert = MyActivityTools.myDialog(this, v, "正在登录 ", Gravity.CENTER);//		myStartGif(this, v, "正在登录 ");//	启动gif动画		KJHttp kjt = new KJHttp();		HttpParams params = new HttpParams();		params.put("logName", uNameLogin);		params.put("pw", uPwdLogin);		System.out.println(HTTP_IP+"admin/appLogin/login?"+"logName="+name+"&pw="+pwd);//		kjt.post(HTTP_IP+"TempLogin.json", null, new HttpCallBack() {		kjt.post(HTTP_IP+"admin/appLogin/login?", params, new HttpCallBack() {			@Override			public void onSuccess(String t) {				super.onSuccess(t);				if ("".equals(t)) {					System.out.println("更新应答为空");					return;				} else {//					lLogin = JSON.parseArray(t,TempLogin.class);					loginTemp = JSON.parseObject(t, TempLogin.class);					if (loginTemp.isSuccess()) {						loginT.setLogName(loginTemp.getObj().getLogName());						loginT.setReadName(loginTemp.getObj().getName());						loginT.setPw(loginTemp.getObj().getPw());						loginT.setReadNumber(loginTemp.getObj().getReadNumber());						loginT.setMsg(loginTemp.getMsg());						loginT.setSuccess(loginTemp.isSuccess());						loginT.setLogTime(new Date());						int count = 0;						List<tLogin> login = dbLogin.findAll(tLogin.class);						if (login != null){						if (login.size() > 0) {							for (tLogin tl : login) {//								LogUtils.i(tl.getReadName()+"ReadName="+loginT.getReadName()+"**************"+tl.getReadNumber()+"\t\t\tReadNumber="+loginT.getReadNumber());								if (tl.getReadNumber().equals(loginT.getReadNumber())) {									//tl.getReadNumber().equals(loginT.getReadNumber())									//tl.getReadName().equals(loginT.getReadName())									bl = true;								} else {								}								count++;							}							if (bl) {								dbLogin.update(loginT, "readName=" + "\'" + loginT.getReadName() + "\'");							} else {								dbLogin.save(loginT);							}						} else {							dbLogin.save(loginT);//登录成功 把账号,密码存到本地						}					}//						ToastDemo.myHint(LoginDemo.this, "登录成功\n");						ToastUtils.showLong(LoginDemo.this, "登录成功", TastyToast.SUCCESS);						SharedPreUtils.put(LoginDemo.this, "log_name", uNameLogin);						SharedPreUtils.put(LoginDemo.this, "log_pwd", uPwdLogin);						SharedPreUtils.put(LoginDemo.this, "log_id", loginTemp.getObj().getId());						myResult(loginTemp.getObj().getReadNumber(), loginTemp.getObj().getName(), loginTemp.isSuccess());					}else {//						ToastDemo.myHint(LoginDemo.this, "登录失败\n" );						ToastUtils.showLong(LoginDemo.this, "登录失败\n"+loginTemp.getMsg(), TastyToast.ERROR);						myResult("-1", "", false);					}					System.out.println("返回信息是+" + t.toString());				}				alert.cancel();			}			@Override			public void onFailure(int t, String strMsg) {				super.onFailure(t, strMsg);				if (HttpExcTint.hTimeout.equals(strMsg)){//					ToastDemo.myHint(LoginDemo.this, "访问超时");					ToastUtils.showLong(LoginDemo.this, "访问超时, 请重试或选择本地登录", TastyToast.ERROR);				}else if(HttpExcTint.hNoConnectServer.equals(strMsg)){//					ToastDemo.myHint(LoginDemo.this, "访问失败");					ToastUtils.showLong(LoginDemo.this, "访问失败, 请重试或选择本地登录", TastyToast.ERROR);//					ToastUtils.showLong(LoginDemo.this, "访问失败", TastyToast.ERROR);				}else {//					ToastDemo.myHint(LoginDemo.this, "访问异常");					ToastUtils.showLong(LoginDemo.this, "访问异常", TastyToast.ERROR);				}					//加载失败的时候回调					System.out.println("返回错误码："+ t +"\nhttp访问异常：" + strMsg);					if (t == -1){				}else {//					ToastDemo.myHint(LoginDemo.this, "访问异常\n" +"请检查网络或服务器是否开启！！！");						ToastUtils.showLong(LoginDemo.this, "访问异常\n" +								"\" +\"请检查网络或服务器是否开启！！！", TastyToast.ERROR);//				ToastDemo.myHint(LoginDemo.this, "http访问异常\n" + strMsg+"\n请检查网络或服务器是否开启！！！");				}				alert.cancel();			}			@Override			public void onLoading(long count, long current) {				super.onLoading(count, current);				if (current == count)					System.out.println("登录进度：" + current / count);			}//		});	}	public static AlertDialog alert;	/**	 * dysen 2015-7-11 上午11:45:15 info: 启动 动画 gif 播放	 */	public static void myStartGif(Context context, View v, String str) {		// 把该 Activity 添加到 activity列表里 方便退出时一下子退出所有activity		// QuitAllActivity.getInstance().addActivity(this);//		alert = new AlertDialog.Builder(context).create();		alert = new SpotsDialog(context, "Logining");//		alert.setTitle(str);//		alert.getWindow().setContentView(v);//		// 从xml中得到GifView的句柄//		GifView gf1 = (GifView) v.findViewById(R.id.gif1);//		// 设置Gif图片源//		gf1.setGifImage(R.drawable.loading);////		// 设置显示的大小，拉伸或者压缩//		gf1.setShowDimension(300, 300);//		// 设置加载方式：先加载后显示、边加载边显示、只显示第一帧再显示//		gf1.setGifImageType(GifImageType.COVER);	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {			finishActivity("-1", "", false);// 返回数据		}		return false;	}}